import{c as e,a as n,u as a,R as t,j as s,b as r,N as o,m as i,L as l}from"./index-Dx_FS4j8.js";import c from"./Footer-BbgujMET.js";import{A as d}from"./arrow-left-D0FAeZ3k.js";import{C as p}from"./calendar-DtYgN-a3.js";import{C as m,T as u}from"./tag-BbPtvNk0.js";import{E as y}from"./external-link-8wkuDbSO.js";import"./github-DXlbfpaQ.js";import"./linkedin-CB5ecBWN.js";import"./heart-BUsVhQpv.js";
/**
 * @license lucide-react v0.473.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const g=e("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),h=e("Copy",[["rect",{width:"14",height:"14",x:"8",y:"8",rx:"2",ry:"2",key:"17jyea"}],["path",{d:"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",key:"zix9uf"}]]),x=e("MessageCircle",[["path",{d:"M7.9 20A9 9 0 1 0 4 16.1L2 22Z",key:"vv11sd"}]]),b=e("Share2",[["circle",{cx:"18",cy:"5",r:"3",key:"gq8acd"}],["circle",{cx:"6",cy:"12",r:"3",key:"w7nqdw"}],["circle",{cx:"18",cy:"19",r:"3",key:"1xt0gg"}],["line",{x1:"8.59",x2:"15.42",y1:"13.51",y2:"17.49",key:"47mynk"}],["line",{x1:"15.41",x2:"8.59",y1:"6.51",y2:"10.49",key:"1n3mei"}]]),f=[{id:1,slug:"getting-started-with-python",title:{en:"Getting Started with Python for Backend Development",es:"Comenzando con Python para Desarrollo Backend"},excerpt:{en:"A comprehensive guide to starting your backend development journey with Python, covering the fundamentals and best practices.",es:"Una guía completa para comenzar tu viaje de desarrollo backend con Python, cubriendo los fundamentos y mejores prácticas."},content:{en:'\n# Getting Started with Python for Backend Development\n\nPython has become one of the most popular languages for backend development, and for good reason. Its clean syntax, extensive libraries, and robust ecosystem make it an excellent choice for building scalable web applications.\n\n## Why Choose Python for Backend Development?\n\n### 1. Simplicity and Readability\nPython\'s syntax is clean and intuitive, making it easy to write and maintain code. This is especially important in backend development where code needs to be robust and maintainable.\n\n### 2. Rich Ecosystem\nPython has an extensive collection of libraries and frameworks that can help you build almost anything:\n- **Web Frameworks**: Django, FastAPI, Flask\n- **Database ORMs**: SQLAlchemy, Django ORM\n- **API Development**: FastAPI, Django REST Framework\n- **Task Queues**: Celery, RQ\n\n### 3. Performance and Scalability\nWhile Python may not be the fastest language, it offers excellent performance for most web applications. With proper optimization and the right tools, Python can handle high-traffic applications.\n\n## Setting Up Your Development Environment\n\nBefore we start coding, let\'s set up a proper development environment:\n\n```bash\n# Install Python (if not already installed)\n# On Windows: Download from python.org\n# On macOS: brew install python\n# On Linux: sudo apt-get install python3\n\n# Create a virtual environment\npython -m venv backend_env\n\n# Activate the virtual environment\n# On Windows:\nbackend_env\\Scripts\\activate\n# On macOS/Linux:\nsource backend_env/bin/activate\n\n# Install essential packages\npip install fastapi uvicorn sqlalchemy psycopg2-binary\n```\n\n## Your First Backend API\n\nLet\'s create a simple API using FastAPI:\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI(title="My Backend API", version="1.0.0")\n\n# Data models\nclass User(BaseModel):\n    id: Optional[int] = None\n    name: str\n    email: str\n\n# In-memory storage (use a database in production)\nusers = []\n\n@app.get("/")\nasync def root():\n    return {"message": "Welcome to my Backend API"}\n\n@app.post("/users/", response_model=User)\nasync def create_user(user: User):\n    user.id = len(users) + 1\n    users.append(user)\n    return user\n\n@app.get("/users/", response_model=List[User])\nasync def get_users():\n    return users\n\n@app.get("/users/{user_id}", response_model=User)\nasync def get_user(user_id: int):\n    for user in users:\n        if user.id == user_id:\n            return user\n    raise HTTPException(status_code=404, detail="User not found")\n```\n\n## Best Practices\n\n### 1. Use Virtual Environments\nAlways use virtual environments to isolate your project dependencies:\n\n```bash\npython -m venv myproject_env\nsource myproject_env/bin/activate  # On Windows: myproject_env\\Scripts\\activate\n```\n\n### 2. Follow PEP 8 Style Guide\nUse tools like `black` and `flake8` to ensure your code follows Python style conventions:\n\n```bash\npip install black flake8\nblack your_file.py\nflake8 your_file.py\n```\n\n### 3. Use Type Hints\nType hints make your code more readable and help catch errors early:\n\n```python\nfrom typing import List, Optional\n\ndef get_user_names(users: List[User]) -> List[str]:\n    return [user.name for user in users]\n```\n\n### 4. Handle Errors Gracefully\nAlways implement proper error handling:\n\n```python\nfrom fastapi import HTTPException\n\n@app.get("/users/{user_id}")\nasync def get_user(user_id: int):\n    try:\n        user = await database.fetch_user(user_id)\n        if not user:\n            raise HTTPException(status_code=404, detail="User not found")\n        return user\n    except Exception as e:\n        raise HTTPException(status_code=500, detail="Internal server error")\n```\n\n## Next Steps\n\nNow that you have a basic understanding of Python backend development:\n\n1. **Learn a Framework**: Dive deeper into FastAPI, Django, or Flask\n2. **Database Integration**: Learn SQLAlchemy or Django ORM\n3. **Authentication**: Implement JWT authentication\n4. **Testing**: Write tests using pytest\n5. **Deployment**: Learn Docker and cloud deployment\n\nPython backend development is a rewarding journey. Start with simple projects and gradually work your way up to more complex applications. The key is to practice consistently and build real-world projects.\n\nHappy coding! 🐍\n      ',es:'\n# Comenzando con Python para Desarrollo Backend\n\nPython se ha convertido en uno de los lenguajes más populares para el desarrollo backend, y por buena razón. Su sintaxis limpia, amplia biblioteca y ecosistema robusto lo convierten en una excelente opción para construir aplicaciones web escalables.\n\n## ¿Por qué elegir Python para Desarrollo Backend?\n\n### 1. Simplicidad y Legibilidad\nLa sintaxis de Python es limpia e intuitiva, haciendo fácil escribir y mantener código. Esto es especialmente importante en el desarrollo backend donde el código necesita ser robusto y mantenible.\n\n### 2. Ecosistema Rico\nPython tiene una extensa colección de bibliotecas y frameworks que pueden ayudarte a construir casi cualquier cosa:\n- **Frameworks Web**: Django, FastAPI, Flask\n- **ORMs de Base de Datos**: SQLAlchemy, Django ORM\n- **Desarrollo de APIs**: FastAPI, Django REST Framework\n- **Colas de Tareas**: Celery, RQ\n\n### 3. Rendimiento y Escalabilidad\nAunque Python no sea el lenguaje más rápido, ofrece excelente rendimiento para la mayoría de aplicaciones web. Con la optimización adecuada y las herramientas correctas, Python puede manejar aplicaciones de alto tráfico.\n\n## Configurando tu Entorno de Desarrollo\n\nAntes de comenzar a codificar, configuremos un entorno de desarrollo adecuado:\n\n```bash\n# Instalar Python (si no está instalado)\n# En Windows: Descargar de python.org\n# En macOS: brew install python\n# En Linux: sudo apt-get install python3\n\n# Crear un entorno virtual\npython -m venv backend_env\n\n# Activar el entorno virtual\n# En Windows:\nbackend_env\\Scripts\\activate\n# En macOS/Linux:\nsource backend_env/bin/activate\n\n# Instalar paquetes esenciales\npip install fastapi uvicorn sqlalchemy psycopg2-binary\n```\n\n## Tu Primera API Backend\n\nCreemos una API simple usando FastAPI:\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI(title="Mi API Backend", version="1.0.0")\n\n# Modelos de datos\nclass User(BaseModel):\n    id: Optional[int] = None\n    name: str\n    email: str\n\n# Almacenamiento en memoria (usa una base de datos en producción)\nusers = []\n\n@app.get("/")\nasync def root():\n    return {"message": "Bienvenido a mi API Backend"}\n\n@app.post("/users/", response_model=User)\nasync def create_user(user: User):\n    user.id = len(users) + 1\n    users.append(user)\n    return user\n\n@app.get("/users/", response_model=List[User])\nasync def get_users():\n    return users\n\n@app.get("/users/{user_id}", response_model=User)\nasync def get_user(user_id: int):\n    for user in users:\n        if user.id == user_id:\n            return user\n    raise HTTPException(status_code=404, detail="Usuario no encontrado")\n```\n\n## Mejores Prácticas\n\n### 1. Usar Entornos Virtuales\nSiempre usa entornos virtuales para aislar las dependencias de tu proyecto:\n\n```bash\npython -m venv myproject_env\nsource myproject_env/bin/activate  # En Windows: myproject_env\\Scripts\\activate\n```\n\n### 2. Seguir la Guía de Estilo PEP 8\nUsa herramientas como `black` y `flake8` para asegurar que tu código siga las convenciones de estilo de Python:\n\n```bash\npip install black flake8\nblack your_file.py\nflake8 your_file.py\n```\n\n### 3. Usar Anotaciones de Tipo\nLas anotaciones de tipo hacen tu código más legible y ayudan a detectar errores temprano:\n\n```python\nfrom typing import List, Optional\n\ndef get_user_names(users: List[User]) -> List[str]:\n    return [user.name for user in users]\n```\n\n### 4. Manejar Errores Apropiadamente\nSiempre implementa manejo de errores adecuado:\n\n```python\nfrom fastapi import HTTPException\n\n@app.get("/users/{user_id}")\nasync def get_user(user_id: int):\n    try:\n        user = await database.fetch_user(user_id)\n        if not user:\n            raise HTTPException(status_code=404, detail="Usuario no encontrado")\n        return user\n    except Exception as e:\n        raise HTTPException(status_code=500, detail="Error interno del servidor")\n```\n\n## Próximos Pasos\n\nAhora que tienes un entendimiento básico del desarrollo backend con Python:\n\n1. **Aprende un Framework**: Profundiza en FastAPI, Django, o Flask\n2. **Integración de Base de Datos**: Aprende SQLAlchemy o Django ORM\n3. **Autenticación**: Implementa autenticación JWT\n4. **Testing**: Escribe pruebas usando pytest\n5. **Despliegue**: Aprende Docker y despliegue en la nube\n\nEl desarrollo backend con Python es un viaje gratificante. Comienza con proyectos simples y gradualmente avanza hacia aplicaciones más complejas. La clave es practicar consistentemente y construir proyectos del mundo real.\n\n¡Feliz programación! 🐍\n      '},date:"2025-01-15",readTime:5,category:"Python",tags:["Python","Backend","Beginner","Programming"],featured:!0},{id:2,slug:"fastapi-vs-django",title:{en:"FastAPI vs Django: Choosing the Right Framework",es:"FastAPI vs Django: Eligiendo el Framework Correcto"},excerpt:{en:"Comparing two of the most popular Python web frameworks to help you make the right choice for your project.",es:"Comparando dos de los frameworks web de Python más populares para ayudarte a elegir el correcto para tu proyecto."},content:{en:"When building web applications with Python, two frameworks stand out: FastAPI and Django. Both are excellent choices, but they serve different purposes and have different strengths...",es:"Al construir aplicaciones web con Python, dos frameworks destacan: FastAPI y Django. Ambos son excelentes opciones, pero sirven diferentes propósitos y tienen diferentes fortalezas..."},date:"2025-01-10",readTime:8,category:"Frameworks",tags:["FastAPI","Django","Comparison","Web Development"],featured:!1}];function k(){const{slug:e}=n(),{lang:k}=a(),[v,j]=t.useState(!1),w=f.find(n=>n.slug===e);if(!w)return s.jsx(r,{to:"/404",replace:!0});const P=window.location.href,_=w.title[k],A=()=>{const e=`https://twitter.com/intent/tweet?text=${encodeURIComponent(_)}&url=${encodeURIComponent(P)}`;window.open(e,"_blank")};return s.jsxs("div",{className:"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900",children:[s.jsx(o,{}),s.jsx("main",{className:"pt-20 pb-20",children:s.jsxs("div",{className:"max-w-4xl mx-auto px-6",children:[s.jsx(i.div,{initial:{opacity:0,x:-20},animate:{opacity:1,x:0},transition:{duration:.6},className:"mb-8",children:s.jsxs(l,{to:"/blog",className:"inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors",children:[s.jsx(d,{className:"w-4 h-4"}),"en"===k?"Back to Blog":"Volver al Blog"]})}),s.jsxs(i.header,{initial:{opacity:0,y:30},animate:{opacity:1,y:0},transition:{duration:.8},className:"mb-12",children:[w.featured&&s.jsx("div",{className:"inline-block bg-gradient-to-r from-blue-500 to-purple-500 text-white text-sm font-semibold px-4 py-2 rounded-full mb-6",children:"en"===k?"Featured Post":"Post Destacado"}),s.jsx("h1",{className:"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent",children:w.title[k]}),s.jsx("p",{className:"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed",children:w.excerpt[k]}),s.jsxs("div",{className:"flex flex-wrap items-center gap-6 text-sm text-gray-500 dark:text-gray-400 mb-8",children:[s.jsxs("div",{className:"flex items-center gap-2",children:[s.jsx(p,{className:"w-4 h-4"}),(N=w.date,new Date(N).toLocaleDateString("en"===k?"en-US":"es-ES",{year:"numeric",month:"long",day:"numeric"}))]}),s.jsxs("div",{className:"flex items-center gap-2",children:[s.jsx(m,{className:"w-4 h-4"}),w.readTime," ","en"===k?"min read":"min lectura"]}),s.jsx("div",{className:"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-3 py-1 rounded-full text-xs font-medium",children:w.category})]}),s.jsx("div",{className:"flex flex-wrap gap-2 mb-8",children:w.tags.map(e=>s.jsxs("span",{className:"inline-flex items-center gap-1 px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full text-sm",children:[s.jsx(u,{className:"w-3 h-3"}),e]},e))}),s.jsxs("div",{className:"flex items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-xl",children:[s.jsxs("div",{className:"flex items-center gap-2 text-gray-600 dark:text-gray-400",children:[s.jsx(b,{className:"w-4 h-4"}),s.jsx("span",{className:"text-sm font-medium",children:"en"===k?"Share:":"Compartir:"})]}),s.jsx("button",{onClick:A,className:"p-2 text-blue-500 hover:bg-blue-100 dark:hover:bg-blue-900 rounded-lg transition-colors",title:"Share on Social Media",children:s.jsx(x,{className:"w-4 h-4"})}),s.jsx("button",{onClick:A,className:"p-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900 rounded-lg transition-colors",title:"Share Link",children:s.jsx(y,{className:"w-4 h-4"})}),s.jsx("button",{onClick:async()=>{try{await navigator.clipboard.writeText(P),j(!0),setTimeout(()=>j(!1),2e3)}catch(e){console.error("Failed to copy: ",e)}},className:"p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors",title:"en"===k?"Copy link":"Copiar enlace",children:v?s.jsx(g,{className:"w-4 h-4 text-green-500"}):s.jsx(h,{className:"w-4 h-4"})})]})]}),s.jsx(i.article,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.8,delay:.2},className:"prose prose-lg dark:prose-invert max-w-none",children:s.jsx("div",{className:"leading-relaxed",dangerouslySetInnerHTML:{__html:w.content[k].replace(/\n/g,"<br />")}})}),s.jsx(i.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.8,delay:.4},className:"mt-16 pt-8 border-t border-gray-200 dark:border-gray-700",children:s.jsxs("div",{className:"flex justify-between items-center",children:[s.jsxs(l,{to:"/blog",className:"inline-flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors font-medium",children:[s.jsx(d,{className:"w-4 h-4"}),"en"===k?"More Posts":"Más Posts"]}),s.jsx("div",{className:"text-sm text-gray-500 dark:text-gray-400",children:"en"===k?"Thanks for reading!":"¡Gracias por leer!"})]})})]})}),s.jsx(c,{})]});var N}export{k as default};
